name: SonarQube
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build and analyze
    runs-on: windows-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'
      
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      
      - name: Cache SonarScanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      
      - name: Install SonarScanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      
      - name: Install Coverlet
        shell: powershell
        run: dotnet tool install --global coverlet.console
      
      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: powershell
        run: |
          cd ./source
          
          # Запуск SonarScanner
          ..\.sonar\scanner\dotnet-sonarscanner begin /k:"wtmzoo_calc-net" /o:"wtmzoo" `
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" `
            /d:sonar.host.url="https://sonarcloud.io" `
            /d:sonar.cs.opencover.reportsPaths="coverage.xml" `
            /d:sonar.coverage.exclusions="**Test*.cs"
          
          dotnet build --no-incremental
          
          dotnet test `
            --collect:"XPlat Code Coverage" `
            --settings:coverlet.runsettings `
            --logger:"trx;LogFileName=testresults.trx"
          
          coverlet .\CalcNet.Tests\bin\Debug\net8.0\CalcNet.Tests.dll `
            --target "dotnet" `
            --targetargs "test .\CalcNet.Tests --no-build" `
            --format opencover `
            --output "coverage.xml"
          
          ..\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
